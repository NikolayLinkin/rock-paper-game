{"version":3,"sources":["serviceWorker.js","reducers/game.js","constants/ActionsTypes.js","reducers/session.js","reducers/index.js","components/WeaponsItem.js","components/Weapons.js","components/GameResult.js","components/PvE.js","utils/PvEUtils.js","utils/socketUtils.js","actions/GameActions.js","selectors/commonSelectors.js","containers/PvEContainer.js","components/RoomsList.js","components/popups/PopupCreateRoom.js","components/popups/PopupLogin.js","components/PvP.js","constants/ApiConstants.js","actions/PvPActions.js","containers/PvPContainer.js","utils/apiUtils.js","components/Room.js","containers/RoomContainer.js","components/ChooseGameMode.js","components/Root.js","containers/RootContainer.js","index.js","store/createStore.js"],"names":["Boolean","window","location","hostname","match","initialState","finish","canStart","result","enemyRate","selectedWeapon","message","game","state","action","type","playerRate","gameResult","socketId","rooms","currentRoom","userName","errStatus","errText","session","id","rootReducer","combineReducers","WeaponItem","name","chooseWeapon","className","checked","onChange","hidden","Weapons","props","handleSubmit","e","preventDefault","applyChoose","setState","error","stopTimer","startTimer","timer","setInterval","time","timerStarted","resetTimer","clearInterval","startNewGame","this","Math","floor","random","gameFinish","onSubmit","style","margin","onClick","disabled","Component","GameResult","resultClass","classNames","PvE","startPvEGame","rates","playWithAi","aiRate","emitApi","event","data","Promise","resolve","reject","socket","emit","res","status","userJoin","roomName","emitRate","rate","dispatch","a","getGameResult","getEnemyRate","getPlayerRate","getGameMessage","getGameFinish","getGameCanStart","getRooms","getSessionErrorStatus","getSessionErrorText","getCurrentRoom","getUserName","connect","RoomsList","joinInRoom","map","room","key","PopupCreateRoom","current","value","length","React","createRef","needRoomName","closePopup","placeholder","ref","PopupLogin","login","chooseRoom","errorText","PvP","togglePopup","popupName","openPopupName","sessionErrStatus","connectToServer","fetchRooms","nextProps","nextState","nextContext","history","push","roomsList","sessionErrText","withRouter","GET_ROOMS","gameWinnerSuccess","joinInRoomError","joinInRoomSuccess","console","log","gameMessage","getState","io","socketApi","on","winnerId","draw","hasOwnProperty","leaveFromServer","disconnect","fetch","callApi","then","response","ok","json","catch","Room","leave","leaveFromRoom","ChooseGameMode","to","Root","exact","path","component","PvEContainer","PvPContainer","RoomContainer","ReactDOM","render","store","composedEnhancers","composeWithDevTools","applyMiddleware","thunkMiddleware","createStore","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3c5137aa.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as types from \"../constants/ActionsTypes\";\r\n\r\nconst initialState = {\r\n    finish: false,\r\n    canStart: false,\r\n    result: null,\r\n    enemyRate: null,\r\n    selectedWeapon: null,\r\n    message: null,\r\n};\r\n\r\nconst game = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.GAME_START: {\r\n            return {\r\n                ...state,\r\n                finish: false,\r\n                result: null,\r\n                enemyRate: null,\r\n                playerRate: null,\r\n            }\r\n        }\r\n        case types.GAME_FINISH: {\r\n            return {\r\n                ...state,\r\n                result: action.gameResult,\r\n                enemyRate: action.enemyRate,\r\n                playerRate: action.playerRate,\r\n                canStart: true,\r\n                finish: true,\r\n            }\r\n        }\r\n        case types.GAME_CAN_START: {\r\n            return {\r\n                ...state,\r\n                canStart: true,\r\n            }\r\n        }\r\n\r\n        case types.GAME_CANT_START: {\r\n            return {\r\n                ...state,\r\n                canStart: false,\r\n            }\r\n        }\r\n\r\n        case types.GAME_UPDATE_STATUS: {\r\n            return {\r\n                ...state,\r\n                message: action.message,\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default game;","export const GAME_START = \"GAME_START\";\r\nexport const GAME_START_PVP = \"GAME_START_PVP\";\r\nexport const GAME_UPDATE_STATUS = \"GAME_UPDATE_STATUS\";\r\nexport const GAME_FINISH = \"GAME_FINISH\";\r\nexport const GAME_CAN_START = \"GAME_CAN_START\";\r\nexport const GAME_CANT_START = \"GAME_CANT_START\";\r\nexport const UPDATE_GAME_HISTORY = \"UPDATE_GAME_HISTORY\";\r\nexport const GAME_SELECTED_WEAPON = \"GAME_SELECTED_WEAPON\";\r\nexport const GAME_CHANGE_MODE = \"GAME_CHANGE_MODE\";\r\n\r\nexport const SAVE_SOCKET_ID = \"SAVE_USER_ID\";\r\nexport const SAVE_USER_NAME = \"SAVE_USER_NAME\";\r\nexport const FETCH_ROOMS = \"FETCH_ROOMS\";\r\n\r\nexport const ROOM_JOIN_SUCCESS = \"ROOM_JOIN_SUCCESS\";\r\nexport const ROOM_JOIN_ERROR = \"ROOM_JOIN__ERROR\";\r\nexport const ROOM_LEAVE = \"ROOM_LEAVE\";","import * as types from \"../constants/ActionsTypes\";\r\n\r\nconst initialState = {\r\n    socketId: null,\r\n    rooms: [],\r\n    currentRoom: null,\r\n    userName: null,\r\n    errStatus: null,\r\n    errText: null,\r\n};\r\n\r\nconst session = (state=initialState, action) => {\r\n    switch (action.type) {\r\n        case types.SAVE_SOCKET_ID: {\r\n            return {\r\n                ...state,\r\n                socketId: action.id,\r\n            }\r\n        }\r\n\r\n        case types.SAVE_USER_NAME: {\r\n            return {\r\n                ...state,\r\n                userName: action.userName,\r\n            }\r\n        }\r\n\r\n        case types.FETCH_ROOMS: {\r\n            return {\r\n                ...state,\r\n                rooms: [...action.rooms],\r\n            }\r\n        }\r\n\r\n\r\n        case types.ROOM_JOIN_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                currentRoom: action.currentRoom,\r\n                userName: action.userName,\r\n                socketId: action.socketId,\r\n                errText: \"\",\r\n                errStatus: \"\",\r\n            }\r\n        }\r\n\r\n        case types.ROOM_JOIN_ERROR: {\r\n            return {\r\n                ...state,\r\n                errText: action.errText,\r\n                errStatus: action.errStatus,\r\n            }\r\n        }\r\n\r\n        case types.ROOM_LEAVE: {\r\n            return {\r\n                ...state,\r\n                currentRoom: null,\r\n                socketId: null,\r\n                userName: null,\r\n            }\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default session;","import {combineReducers} from \"redux\";\r\n\r\nimport game from \"./game\";\r\nimport session from \"./session\";\r\n\r\nconst rootReducer = combineReducers({\r\n    game,\r\n    session,\r\n});\r\n\r\nexport default rootReducer;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    chooseWeapon: PropTypes.func.isRequired,\r\n};\r\n\r\nconst WeaponItem = ({name, chooseWeapon, selectedWeapon}) => {\r\n\r\n    return (\r\n        <label className=\"weapons__item\">\r\n            <input className=\"weapons__item__inp\"\r\n                   checked={selectedWeapon===name}\r\n                   onChange={() => chooseWeapon(name)}\r\n                   type=\"radio\" name=\"weapon\" hidden/>\r\n            <span className={`weapons__item__span weapons__item__span--${name}`}/>\r\n            {name}\r\n        </label>\r\n    )\r\n};\r\n\r\nWeaponItem.propTypes = propTypes;\r\nexport default WeaponItem;","import React, {Component} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport WeaponItem from \"./WeaponsItem\";\r\n\r\nclass Weapons extends Component {\r\n    static propTypes = {\r\n        applyChoose: PropTypes.func.isRequired,\r\n        startNewGame: PropTypes.func.isRequired,\r\n        gameFinish: PropTypes.bool.isRequired,\r\n        canStart: PropTypes.bool.isRequired,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.timer = null;\r\n\r\n        this.state = {\r\n            selectedWeapon: '',\r\n            time: 30,\r\n            timerStarted: false,\r\n            error: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.canStart && !this.state.timerStarted) {\r\n            this.startTimer();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const {canStart, applyChoose} = this.props;\r\n        const {time, timerStarted} = this.state;\r\n\r\n        if (canStart && !timerStarted) {\r\n            this.startTimer();\r\n        }\r\n\r\n        if (time === 0) {\r\n            this.stopTimer();\r\n\r\n            const rates = ['rock', 'paper', 'scissors'];\r\n            const rate = rates[Math.floor(Math.random() * 3)];\r\n            applyChoose(rate);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.stopTimer();\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const {selectedWeapon} = this.state;\r\n        const {\r\n            applyChoose,\r\n        } = this.props;\r\n\r\n\r\n        if (!selectedWeapon) {\r\n            this.setState(state => ({error: 'Нужно выбрать предмет'}));\r\n            return false;\r\n        }\r\n        this.stopTimer();\r\n        applyChoose(selectedWeapon);\r\n    };\r\n\r\n    startTimer = () => {\r\n        this.timer = setInterval(() => this.setState({\r\n            time: this.state.time - 1\r\n        }), 1000);\r\n\r\n        this.setState(state => ({timerStarted: true}));\r\n    };\r\n\r\n    resetTimer = () => {\r\n        this.setState(state => ({\r\n            timerStarted: false,\r\n            time: 30,\r\n        }))\r\n    };\r\n\r\n    stopTimer = () => {\r\n        clearInterval(this.timer);\r\n        this.setState(state => ({time: 30}))\r\n    };\r\n\r\n    startNewGame = (e) => {\r\n        e.preventDefault();\r\n        const {startNewGame} = this.props;\r\n        this.setState(state => ({selectedWeapon: ''}));\r\n        this.resetTimer();\r\n        startNewGame();\r\n    };\r\n\r\n    chooseWeapon = (name) => {\r\n        this.setState(state => ({selectedWeapon: name}));\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            error,\r\n            selectedWeapon,\r\n            time,\r\n        } = this.state;\r\n        const {gameFinish, canStart} = this.props;\r\n\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                {error ? <div className=\"weapons__error\">{error}</div> : ''}\r\n                <div className=\"weapons\">\r\n                    <WeaponItem chooseWeapon={this.chooseWeapon}\r\n                                selectedWeapon={selectedWeapon}\r\n                                name={'rock'}/>\r\n                    <WeaponItem chooseWeapon={this.chooseWeapon}\r\n                                selectedWeapon={selectedWeapon}\r\n                                name={'scissors'}/>\r\n                    <WeaponItem chooseWeapon={this.chooseWeapon}\r\n                                selectedWeapon={selectedWeapon}\r\n                                name={'paper'}/>\r\n                </div>\r\n\r\n                <div style={{margin: '50px'}}>\r\n                    {!canStart ? 'Ожидание других игроков' :\r\n                        <div className=\"timer\">\r\n                            Остаток времени на выбор: {time}\r\n                        </div>\r\n                    }\r\n                </div>\r\n\r\n                {gameFinish ?\r\n                    <button onClick={this.startNewGame} className=\"weapons__btn\">\r\n                        Начать новую игру\r\n                    </button>\r\n                    :\r\n                    <button type=\"submit\" className=\"weapons__btn\" disabled={!canStart}>\r\n                        Подтвердить выбор\r\n                    </button>\r\n                }\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Weapons;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\n\r\n\r\nconst propTypes = {\r\n    enemyRate: PropTypes.string.isRequired,\r\n    playerRate: PropTypes.string.isRequired,\r\n    gameResult: PropTypes.string.isRequired,\r\n};\r\n\r\nconst GameResult = ({enemyRate, playerRate, gameResult}) => {\r\n    const resultClass = classNames({\r\n        \"result__finish\": true,\r\n        \"result__finish--win\": gameResult === \"win\",\r\n        \"result__finish--lose\": gameResult === \"lose\",\r\n        \"result__finish--draw\": gameResult === \"draw\",\r\n    });\r\n\r\n    return (\r\n        <div className=\"result\">\r\n            <div className=\"result__items\">\r\n                <div className=\"result__item\">\r\n                    <span>Ваш выбор:</span>\r\n                    <div className={`result__item__ico result__item__ico--${playerRate}`}/>\r\n                </div>\r\n                <div className=\"result__item--vs\">\r\n                    VS\r\n                </div>\r\n                <div className=\"result__item\">\r\n                    <span>Выбор противника:</span>\r\n                    <div className={`result__item__ico result__item__ico--${enemyRate}`}/>\r\n                </div>\r\n            </div>\r\n            <div className={resultClass}>\r\n                {gameResult !== \"draw\" ? \"You:\" : \"\"} {gameResult}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nGameResult.propTypes = propTypes;\r\nexport default GameResult;","import React, {Component} from \"react\";\r\n\r\nimport Weapons from \"../components/Weapons\";\r\nimport GameResult from \"./GameResult\";\r\n\r\nclass PvE extends Component {\r\n    render() {\r\n        const {\r\n            startPvEGame,\r\n            startNewGame,\r\n            enemyRate,\r\n            playerRate,\r\n            gameResult,\r\n            gameFinish,\r\n        } = this.props;\r\n\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <h2 className=\"title\">\r\n                    Для начала игры, нужно выбрать позицию:\r\n                </h2>\r\n                <Weapons applyChoose={startPvEGame}\r\n                         startNewGame={startNewGame}\r\n                         gameFinish={gameFinish}\r\n                         canStart={true}\r\n                />\r\n\r\n                {gameFinish ?\r\n                    <GameResult enemyRate={enemyRate}\r\n                                playerRate={playerRate}\r\n                                gameResult={gameResult}\r\n                    />\r\n                    : ''\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PvE;","const PAPER = \"paper\";\r\nconst SCISSORS = \"scissors\";\r\nconst ROCK = \"rock\";\r\n\r\nconst rates = [PAPER, SCISSORS, ROCK];\r\nconst getAiRate = () => rates[Math.floor(Math.random() * 3)];\r\n\r\nexport const playWithAi = (playerRate) => {\r\n    const aiRate = getAiRate();\r\n\r\n    if(playerRate === aiRate) {\r\n        return {gameResult: 'draw', aiRate};\r\n    }\r\n\r\n    if(\r\n        (playerRate === PAPER && aiRate === ROCK) ||\r\n        (playerRate === SCISSORS && aiRate === PAPER) ||\r\n        (playerRate === ROCK && aiRate === SCISSORS)\r\n    ) {\r\n        return {gameResult: 'win', aiRate};\r\n    }\r\n\r\n    return {gameResult: 'lose', aiRate};\r\n};","import io from \"socket.io-client\";\r\n\r\n/**\r\n * emit события\r\n * @param event {string}\r\n * @param data {object}\r\n * @returns {Promise<>}\r\n */\r\nconst emitApi = (event, data) => {\r\n      return new Promise((resolve, reject) => {\r\n         if(!socket) {\r\n             reject('No socketApi connection');\r\n         }\r\n\r\n         socket.emit(event, data, (res) => {\r\n             if(res.status === \"Error\" || res.error) {\r\n                 const error = {\r\n                   errText: res.error,\r\n                   errStatus: res.status,\r\n                 };\r\n                 reject(error);\r\n             }\r\n\r\n             resolve(res);\r\n         })\r\n      });\r\n};\r\n\r\nlet socket = null;\r\nconst endpoint = \"http://localhost:3005\";\r\n\r\nexport const connect = () => {\r\n    socket = io.connect(endpoint);\r\n\r\n    return socket;\r\n};\r\n\r\nexport const disconnect = () => {socket.disconnect(); socket = null;};\r\n\r\n/**\r\n *\r\n * @param userName {string} имя пользователя\r\n * @param roomName {string} название комнаты\r\n * @returns {Promise}\r\n */\r\nexport const userJoin = (userName, roomName) => emitApi('userJoin', {userName, roomName});\r\n\r\nexport const userLeave = roomName => emitApi('userLeave', {roomName});\r\n\r\n/**\r\n * отправка ставки на сервер\r\n * @param rate {string} ставка\r\n * @returns {Promise}\r\n */\r\nexport const emitRate = (rate) => emitApi('userRate', {rate});\r\n\r\nexport const playAgain = () => emitApi('playAgain', ({}));","import * as types from \"../constants/ActionsTypes\";\r\nimport {playWithAi} from \"../utils/PvEUtils\";\r\nimport {playAgain} from \"../utils/socketUtils\";\r\n\r\n\r\nconst gameFinish = (gameResult, enemyRate, playerRate) => ({\r\n    type: types.GAME_FINISH,\r\n    gameResult,\r\n    enemyRate,\r\n    playerRate,\r\n});\r\n\r\nexport const startPvEGame = (playerRate) => dispatch => {\r\n    const {gameResult, aiRate} = playWithAi(playerRate);\r\n\r\n    dispatch(gameFinish(gameResult, aiRate, playerRate));\r\n};\r\n\r\nexport const startNewGame = () => async dispatch => {\r\n    await playAgain();\r\n    dispatch({type: types.GAME_START});\r\n};","export const getGameResult = state => state.game.result;\r\nexport const getEnemyRate = state => state.game.enemyRate;\r\nexport const getPlayerRate = state => state.game.playerRate;\r\nexport const getGameMessage = state => state.game.message;\r\n\r\nexport const getGameHistory = state => state.game.history;\r\nexport const getGameFinish = state => state.game.finish;\r\nexport const getGameCanStart = state => state.game.canStart;\r\n\r\nexport const getRooms = state => state.session.rooms;\r\nexport const getSessionErrorStatus = state => state.session.errStatus;\r\nexport const getSessionErrorText = state => state.session.errText;\r\nexport const getCurrentRoom = state => state.session.currentRoom;\r\nexport const getUserName = state => state.session.userName;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport PvE from \"../components/PvE\";\r\n\r\nimport {\r\n    startPvEGame,\r\n    startNewGame,\r\n} from \"../actions/GameActions\";\r\n\r\nimport {\r\n    getEnemyRate,\r\n    getPlayerRate,\r\n    getGameResult,\r\n    getGameFinish,\r\n} from \"../selectors/commonSelectors\";\r\n\r\nconst PvEContainer = props => <PvE {...props}/>;\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        enemyRate: getEnemyRate(state),\r\n        playerRate: getPlayerRate(state),\r\n        gameResult: getGameResult(state),\r\n        gameFinish: getGameFinish(state),\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    startPvEGame,\r\n    startNewGame,\r\n})(PvEContainer);","import React from \"react\";\r\n\r\nconst RoomsList = ({rooms, joinInRoom}) => {\r\n    return (\r\n        <div className=\"rooms\">\r\n            <h3 className=\"rooms__title\">Свободные комнаты:</h3>\r\n            {rooms.map(room =>\r\n                <div key={room.id}\r\n                     className=\"room-preview\"\r\n                     onClick={() => {joinInRoom(room.name)}}>\r\n                    {room.name}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default RoomsList;","import React, {Component} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass PopupCreateRoom extends Component {\r\n    static propTypes = {\r\n        joinInRoom: PropTypes.func.isRequired,\r\n        closePopup: PropTypes.func.isRequired,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.userName = React.createRef();\r\n        this.roomName = React.createRef();\r\n\r\n        this.state = {\r\n            error: '',\r\n            needRoomName: false,\r\n        };\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const {joinInRoom} = this.props;\r\n        const userName = this.userName.current.value;\r\n        const roomName = this.roomName.current.value;\r\n\r\n        if (!userName.length || !roomName.length) {\r\n            this.setState(state => ({error: 'Заполните все поля формы'}));\r\n            return false;\r\n        }\r\n\r\n        joinInRoom(userName, roomName);\r\n\r\n        this.userName.current.value = '';\r\n        this.roomName.current.value = '';\r\n    };\r\n\r\n    render() {\r\n        const {error} = this.state;\r\n        const {closePopup} = this.props;\r\n\r\n        return (\r\n            <div className=\"popup\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    {error ? <div className=\"popup__error\">{error}</div> : ''}\r\n\r\n                    <input className=\"popup__input\"\r\n                           placeholder=\"Имя игрока\"\r\n                           ref={this.userName} type=\"text\"/>\r\n\r\n                    <input className=\"popup__input\"\r\n                           placeholder=\"Название комнаты\"\r\n                           ref={this.roomName} type=\"text\"/>\r\n\r\n                    <button className=\"popup__btn\">\r\n                        Подтвердить\r\n                    </button>\r\n                    <button onClick={closePopup}\r\n                            className=\"popup__btn popup__btn--close\">\r\n                        Отмена\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PopupCreateRoom;","import React, {Component} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass PopupLogin extends Component {\r\n    static propTypes = {\r\n        joinInRoom: PropTypes.func.isRequired,\r\n        closePopup: PropTypes.func.isRequired,\r\n        roomName: PropTypes.string,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.userName = React.createRef();\r\n\r\n        this.state = {\r\n            error: '',\r\n        };\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const userName = this.userName.current.value;\r\n        const {\r\n            joinInRoom,\r\n            login,\r\n            closePopup,\r\n            chooseRoom,\r\n        } = this.props;\r\n\r\n        if (!userName.length) {\r\n            this.setState(state => ({error: 'Заполните имя'}));\r\n            return false;\r\n        }\r\n\r\n        if(chooseRoom) {\r\n            joinInRoom(userName, chooseRoom);\r\n        } else {\r\n            login(userName);\r\n            closePopup();\r\n        }\r\n\r\n        this.userName.current.value = '';\r\n    };\r\n\r\n    render() {\r\n        const {error} = this.state;\r\n        const {closePopup, errorText} = this.props;\r\n\r\n        return (\r\n            <div className=\"popup\">\r\n                <div className=\"popup__inner\">\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        {error ? <div className=\"popup__error\">{error}</div> : ''}\r\n                        {errorText ? <div className=\"popup__error\">{errorText}</div> : ''}\r\n\r\n                        <input className=\"popup__input\"\r\n                               placeholder=\"Имя игрока\"\r\n                               ref={this.userName} type=\"text\"/>\r\n\r\n                        <button className=\"popup__btn\">\r\n                            Подтвердить\r\n                        </button>\r\n                        <button className=\"popup__btn popup__btn--close\"\r\n                                onClick={closePopup}>\r\n                            Отмена\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PopupLogin;","import React, {Component} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\nimport RoomsList from \"./RoomsList\";\r\nimport PopupCreateRoom from \"./popups/PopupCreateRoom\";\r\nimport PopupLogin from \"./popups/PopupLogin\";\r\n\r\n//TODO: Вынести попапы\r\n\r\nclass PvP extends Component {\r\n    static propTypes = {\r\n        connectToServer: PropTypes.func.isRequired,\r\n        leaveFromServer: PropTypes.func.isRequired,\r\n        fetchRooms: PropTypes.func.isRequired,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            openPopupName: \"\",\r\n            chooseRoom: \"\",\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {\r\n            connectToServer,\r\n            fetchRooms,\r\n        } = this.props;\r\n\r\n        connectToServer();\r\n        fetchRooms();\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n        const {currentRoom, userName} = nextProps;\r\n        if (currentRoom && userName) {\r\n            this.props.history.push(`/pvp/rooms/${currentRoom}`);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    togglePopup = (popupName) => {\r\n        this.setState(state => ({openPopupName: popupName}));\r\n    };\r\n\r\n    closePopup = () => {\r\n        this.togglePopup(\"none\");\r\n    };\r\n\r\n    joinInRoom = (roomName) => {\r\n        const {\r\n            joinInRoom,\r\n            userName,\r\n            sessionErrStatus,\r\n        } = this.props;\r\n\r\n        if (sessionErrStatus === \"Error\") {\r\n            this.togglePopup('login');\r\n        }\r\n\r\n        if (userName) {\r\n            joinInRoom(userName, roomName);\r\n        } else {\r\n            this.togglePopup('login');\r\n            this.setState(state => ({chooseRoom: roomName}));\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            roomsList,\r\n            joinInRoom,\r\n            login,\r\n            sessionErrText,\r\n        } = this.props;\r\n\r\n\r\n        const {\r\n            openPopupName,\r\n            chooseRoom,\r\n        } = this.state;\r\n\r\n        return (\r\n            <div className=\"wrapper\">\r\n                {!roomsList.length ?\r\n                    <div className=\"rooms--empty\">Нет свободных комнат</div> :\r\n                    <RoomsList rooms={roomsList} joinInRoom={this.joinInRoom}/>\r\n                }\r\n                <button className=\"rooms__create-btn\"\r\n                        onClick={() => {this.togglePopup('create-room')}}>\r\n                    Создать комнату\r\n                </button>\r\n\r\n                {openPopupName === \"create-room\" ?\r\n                    <PopupCreateRoom joinInRoom={joinInRoom}\r\n                                     closePopup={this.closePopup}\r\n                    /> : ''}\r\n\r\n                {openPopupName === \"login\" ?\r\n                    <PopupLogin joinInRoom={joinInRoom}\r\n                                login={login}\r\n                                chooseRoom={chooseRoom}\r\n                                errorText={sessionErrText}\r\n                                closePopup={this.closePopup}\r\n                    /> : ''}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(PvP);","const API_ROOT = \"http://localhost:3005\";\r\n\r\nexport const GET_ROOMS = `${API_ROOT}/api/rooms`;","import * as socket from \"../utils/socketUtils\";\r\nimport * as types from \"../constants/ActionsTypes\";\r\nimport {GET_ROOMS} from \"../constants/ApiConstants\";\r\nimport {callApi} from \"../utils/apiUtils\";\r\nimport {FETCH_ROOMS} from \"../constants/ActionsTypes\";\r\n\r\nexport const userConnect = (userName) => dispatch => {\r\n\r\n};\r\n\r\nconst gameWinnerSuccess = (gameResult, enemyRate, playerRate) => ({\r\n    type: types.GAME_FINISH,\r\n    gameResult,\r\n    enemyRate,\r\n    playerRate,\r\n});\r\n\r\nexport const connectToServer = () => async (dispatch, getState) => {\r\n    const socketApi = await socket.connect();\r\n\r\n    socketApi.on('checkStatus', res => {\r\n        const {canStart} = res;\r\n\r\n        if (canStart) {\r\n            dispatch({type: types.GAME_CAN_START});\r\n        } else {\r\n            dispatch({type: types.GAME_CANT_START});\r\n        }\r\n    });\r\n\r\n    /**\r\n     * res = {winnerId, rates, draw}\r\n     */\r\n    socketApi.on('getWinner', res => {\r\n        const {winnerId, rates, draw} = res;\r\n\r\n        const state = getState();\r\n        const socketId = state.session.socketId;\r\n\r\n        let gameResult = null,\r\n            enemyRate = null,\r\n            playerRate = null;\r\n\r\n        for (let rate in rates) {\r\n            if (rates.hasOwnProperty(rate)) {\r\n                if (rate === socketId) {\r\n                    playerRate = rates[rate];\r\n                } else {\r\n                    enemyRate = rates[rate];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (draw) {\r\n            gameResult = \"draw\";\r\n        } else if (winnerId === socketId) {\r\n            gameResult = \"win\";\r\n        } else {\r\n            gameResult = \"lose\";\r\n        }\r\n\r\n        //TODO: сделать 3 события GAME_DRAW, GAME_LOSE, GAME_WIN,\r\n        dispatch(gameWinnerSuccess(gameResult, enemyRate, playerRate));\r\n    });\r\n\r\n};\r\nexport const leaveFromServer = () => async dispatch => {\r\n    await socket.disconnect();\r\n    dispatch({type: types.ROOM_LEAVE, currentRoom: null});\r\n};\r\n\r\nexport const leaveFromRoom = () => async dispatch => {\r\n    await socket.userLeave();\r\n    dispatch({type: types.ROOM_LEAVE, currentRoom: null});\r\n};\r\n\r\nexport const fetchRooms = () => async dispatch => {\r\n    const {rooms} = await callApi(GET_ROOMS);\r\n    dispatch({type: FETCH_ROOMS, rooms});\r\n};\r\n\r\nconst joinInRoomError = (errText, errStatus) => ({\r\n    type: types.ROOM_JOIN_ERROR,\r\n    errText,\r\n    errStatus,\r\n});\r\n\r\nconst joinInRoomSuccess = (currentRoom, userName, socketId) => ({\r\n    type: types.ROOM_JOIN_SUCCESS,\r\n    currentRoom,\r\n    userName,\r\n    socketId,\r\n});\r\n\r\n//TODO: подумать как лучше проверять ограничение создания 2х комнат с одиноковым именем,\r\n// по параметру или по названию события\r\n/**\r\n * Создание новой комнаты\r\n * @param userName {string} имя игрока\r\n * @param roomName {string} название комнаты\r\n * @returns {Function}\r\n */\r\nexport const joinInRoom = (userName, roomName) => async dispatch => {\r\n    try {\r\n        const {socketId} = await socket.userJoin(userName, roomName);\r\n        dispatch(joinInRoomSuccess(roomName, userName, socketId));\r\n    } catch (error) {\r\n        const {errText, errStatus} = error;\r\n        dispatch(joinInRoomError(errText, errStatus));\r\n    }\r\n};\r\n\r\nexport const login = (userName) => ({\r\n    type: types.SAVE_USER_NAME,\r\n    userName,\r\n});\r\n\r\n\r\n//TODO: переделать(выводить ошибку)\r\nexport const emitRate = rate => async dispatch => {\r\n    const {error} = await socket.emitRate(rate);\r\n\r\n    if(error) {\r\n        console.log(error);\r\n    }\r\n};","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport PvP from \"../components/PvP\";\r\n\r\nimport {\r\n    connectToServer,\r\n    leaveFromServer,\r\n    fetchRooms,\r\n    joinInRoom,\r\n    emitRate,\r\n    login,\r\n} from \"../actions/PvPActions\";\r\n\r\nimport {\r\n    startNewGame,\r\n} from \"../actions/GameActions\";\r\n\r\nimport {\r\n    getRooms,\r\n    getCurrentRoom,\r\n    getUserName,\r\n    getGameMessage,\r\n    getSessionErrorText,\r\n    getSessionErrorStatus,\r\n} from \"../selectors/commonSelectors\";\r\n\r\nconst PvPContainer = props => <PvP {...props}/>;\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        roomsList: getRooms(state),\r\n        currentRoom: getCurrentRoom(state),\r\n        userName: getUserName(state),\r\n        gameMessage: getGameMessage(state),\r\n        sessionErrText: getSessionErrorText(state),\r\n        sessionErrStatus: getSessionErrorStatus(state),\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    connectToServer,\r\n    leaveFromServer,\r\n    fetchRooms,\r\n    joinInRoom,\r\n    emitRate,\r\n    startNewGame,\r\n    login,\r\n})(PvPContainer);","export const callApi = (url, options) => {\r\n    return fetch(url, options)\r\n        .then(\r\n            response => response.ok ? response.json() : Promise.reject(response),\r\n            error => Promise.reject(error),\r\n        )\r\n        .then(\r\n            json => json ? json : Promise.reject(json),\r\n            error => ({error}),\r\n        )\r\n        .catch(\r\n            error => ({error})\r\n        )\r\n};","import React, {Component} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Weapons from \"./Weapons\";\r\nimport GameResult from \"./GameResult\";\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\nclass Room extends Component {\r\n    static propTypes = {\r\n        leaveFromRoom: PropTypes.func.isRequired,\r\n        emitRate: PropTypes.func.isRequired,\r\n        gameFinish: PropTypes.bool.isRequired,\r\n        startNewGame: PropTypes.func.isRequired,\r\n        enemyRate: PropTypes.string,\r\n        playerRate: PropTypes.string,\r\n        gameResult: PropTypes.string,\r\n        currentRoom: PropTypes.string,\r\n    };\r\n\r\n    componentDidMount() {\r\n        if(!this.props.currentRoom) {\r\n            this.props.history.push('/pvp');\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n        const {currentRoom} = nextProps;\r\n        if(!currentRoom) {\r\n            this.props.history.push('/pvp');\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.leaveFromRoom();\r\n    }\r\n\r\n    leave = (e) => {\r\n        e.preventDefault();\r\n\r\n        this.props.history.push('/pvp');\r\n    };\r\n\r\n    render () {\r\n        const {\r\n            emitRate,\r\n            gameFinish,\r\n            startNewGame,\r\n            enemyRate,\r\n            playerRate,\r\n            gameResult,\r\n            canStart,\r\n            currentRoom,\r\n        } = this.props;\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <h2 className=\"room__title\">\r\n                    Комната {currentRoom}\r\n                </h2>\r\n                <button className=\"room__leave-btn\"\r\n                        onClick={this.leave}>\r\n                    Выйти из комнаты\r\n                </button>\r\n\r\n                <Weapons applyChoose={emitRate}\r\n                         gameFinish={gameFinish}\r\n                         startNewGame={startNewGame}\r\n                         canStart={canStart}\r\n                />\r\n\r\n                {gameFinish ?\r\n                    <GameResult enemyRate={enemyRate}\r\n                                playerRate={playerRate}\r\n                                gameResult={gameResult}\r\n                    /> : \"\"}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Room);","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Room from \"../components/Room\";\r\n\r\nimport {\r\n    leaveFromRoom,\r\n    emitRate,\r\n} from \"../actions/PvPActions\";\r\n\r\nimport {\r\n    startNewGame,\r\n} from \"../actions/GameActions\";\r\n\r\n\r\nimport {\r\n    getCurrentRoom,\r\n    getGameFinish,\r\n    getGameResult,\r\n    getPlayerRate,\r\n    getEnemyRate,\r\n    getGameCanStart,\r\n} from \"../selectors/commonSelectors\";\r\n\r\nconst RoomContainer = props => <Room {...props}/>;\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        enemyRate: getEnemyRate(state),\r\n        gameFinish: getGameFinish(state),\r\n        gameResult: getGameResult(state),\r\n        currentRoom: getCurrentRoom(state),\r\n        playerRate: getPlayerRate(state),\r\n        canStart: getGameCanStart(state),\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    leaveFromRoom,\r\n    emitRate,\r\n    startNewGame,\r\n})(RoomContainer);","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst ChooseGameMode = () => {\r\n    return (\r\n        <div className=\"game-mode__btns\">\r\n            <Link to=\"/pve\" className=\"game-mode__btn game-mode__btn--pve\">\r\n                PVE\r\n            </Link>\r\n            <Link to=\"/pvp\" className=\"game-mode__btn game-mode__btn--pvp\">\r\n                PVP\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChooseGameMode;","import React, {Component} from \"react\";\r\nimport {Route} from \"react-router-dom\";\r\nimport PvEContainer from \"../containers/PvEContainer\";\r\nimport PvPContainer from \"../containers/PvPContainer\";\r\nimport RoomContainer from \"../containers/RoomContainer\";\r\nimport ChooseGameMode from \"./ChooseGameMode\";\r\n\r\n\r\nclass Root extends Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                <Route exact path=\"/\" component={ChooseGameMode}/>\r\n                <Route exact path=\"/pve\" component={PvEContainer}/>\r\n                <Route exact path=\"/pvp\" component={PvPContainer}/>\r\n                <Route exact path=\"/pvp/rooms/:id\" component={RoomContainer}/>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Root;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Root from \"../components/Root\";\r\n\r\nconst RootContainer = props => <Root {...props}/>;\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n\r\n})(RootContainer);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport createStore from \"./store/createStore\";\r\nimport \"normalize.css\";\r\nimport \"./styles/styles.scss\";\r\nimport RootContainer from \"./containers/RootContainer\";\r\nimport {BrowserRouter as Router} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={createStore()}>\r\n        <Router>\r\n            <RootContainer/>\r\n        </Router>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import {createStore, applyMiddleware} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport rootReducer from \"../reducers/index\";\r\n\r\nexport default function configureStore(initialState) {\r\n    const composedEnhancers = composeWithDevTools(applyMiddleware(thunkMiddleware));\r\n\r\n    const store = createStore(rootReducer, initialState, composedEnhancers);\r\n\r\n    if(module.hot) {\r\n        module.hot.accept('../reducers', () => {\r\n            store.replaceReducer(rootReducer);\r\n        })\r\n    }\r\n\r\n    return store;\r\n}"],"sourceRoot":""}